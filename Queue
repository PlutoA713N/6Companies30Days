// Queue is a linear data structure, where the data flows in (First In First Out) approach
// Ex - queue in a bank
// we implement queue using a linkedlist because in order to remove an element at Start(O(1))

/*Operations :
Insertion - Enqueue
Deletion - Dequeue*/

// Insertion
queue = []
queue.push(4)
console.log(queue)

// Deletion 
queue.shift()
console.log(queue)

// If we implemented the queue using Array, it takes O(n) to remove the first element


Practice Questions
Recent Counter
QU-1) Design a class that counts the most recent requests within a time window.

Example:

const counter = new RecentCounter(10); // The time window is 10 ms.
counter.request(1000); // 1 (first request, it always counts)
counter.request(3000); // 1 (last requests was 2000 ms ago, > 10ms, so doesn't count)
counter.request(3100); // 1 (last requests was 100 ms ago, > 10ms, so doesn't count)
counter.request(3105); // 2 (last requests was 5 ms ago, <= 10ms, so it counts)
Common in interviews at: FAANG, Bloomberg, Yandex

Design Snake Game
QU-2) Design the move function for the snake game. The move function returns an integer representing the current score. If the snake goes out of the given height and width or hit itself, the game is over and return -1.

Example:

const snakeGame = new SnakeGame(4, 2, [[1, 2], [0, 1]]);
expect(snakeGame.move('R')).toEqual(0); //  0
expect(snakeGame.move('D')).toEqual(0); //  0
expect(snakeGame.move('R')).toEqual(1); //  1 (ate food1)
expect(snakeGame.move('U')).toEqual(1); //  1
expect(snakeGame.move('L')).toEqual(2); //  2 (ate food2)
expect(snakeGame.move('U')).toEqual(-1); // -1 (hit wall)
Common in interviews at: Amazon, Bloomberg, Apple

