// 1. Creating a new Linked list in JS
class ListNode {
    // Items created for node
    constructor(data) {
        this.data = data
        this.node = null;
    }
}

class LinkedList {
    // A linked list, assigned a value to head
    constructor(head = null){
        this.head = head;
    }
}

// Assigning values to the nodes
let node1 = new ListNode(10)
let node2 = new ListNode(20)
node1.next = node2

// passed node1 to LinkedList
let list = new LinkedList(node1)

console.log(list)

// Output

LinkedList {
  head: ListNode {
    data: 10,
    node: null,
    next: ListNode { data: 20, node: null }
  }
}

// 2. Finding a intersection node in circular linked list using pointers
// To find the intersection point in the cicular linked list
// By using pointers

// t = tortoise, r = rabbit 


let t = head
let r = head
while(r && r.next) {
    t.next
    r.next.next
    if(t == r){
        t = head
    while(t != r){
        t.next
        r.next
    }
    return t;
    }
}
return null;

// 2.2 By using Sets
// Here we used set to find intersection node when we encounter same node, it returns

function findIntersectionNode(head) {
    
const visited = new Set()
let curr = head

while (curr) {
    if(visited.has(curr)) return curr;
    visited.add(curr)
    curr.next
}
return null;
}

